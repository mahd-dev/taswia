module.exports = function (opt) {
  def_opt = {};
  if(!opt.server){
    def_opt.server = require('http').createServer();
  }

  var io = require('socket.io')(opt.server || def_opt.server, opt.socket_io);

  if(opt.session){
    var sharedsession = require("express-socket.io-session");
    io.use(sharedsession(opt.session));
  }

  var callbacks = {
    login: undefined,
    logout: undefined,
    query: [],
    middleware: []
  };

  io.on("connection", function(socket) {

    socket.on("login", function(login_data, client_callback) {
      if(callbacks.login){
        var response = callbacks.login(login_data, socket.handshake.session, function (response) {
          if (!response.error){
            socket.handshake.session.user = {
              id: response.user.id,
              capabilities: response.user.capabilities
            };
            socket.handshake.session.save();
            client_callback(response.client_params);
          }else client_callback(response);
        });
      } else client_callback({error: "login_system_is_not_configured"});
    });

    socket.on("logout", function(data, client_callback) {
      if(callbacks.logout){
        var response = callbacks.logout(socket.handshake.session, function (response) {
          if (!response.error){
            delete socket.handshake.session.user;
            socket.handshake.session.save();
            client_callback(response.client_params);
          } else client_callback(response);
        });
      } else client_callback({error: "login_system_is_not_configured"});
    });

    socket.on("check", function (option, client_callback) {
      switch (option) {
        case 'login':
          client_callback(!!socket.handshake.session.user);
          break;
      }
    })

    socket.on('bind', function (path) {

    });
    socket.on('unbind', function (path) {

    });

    socket.on('patch', function (patch) {
      console.log(patch);
    });

    socket.on("disconnect", function() {
    });

    socket.on('query', function (params, client_callback) {
      run_query(params.url, params.params, socket.handshake.session, client_callback);
    });

  });

  if(def_opt.server) def_opt.server.listen(opt.port || process.env.PORT || 80);

  return {
    on: function (event, callback) {
      switch (event) {
        case "login":
          callbacks.login = callback;
          break;
        case "logout":
          callbacks.logout = callback;
          break;
        default:
        throw new unknown_event();
      }
    },
    off: function (event) {
      switch (event) {
        case "login":
          callbacks.login = undefined;
          break;
        case "logout":
          callbacks.logout = undefined;
          break;
        default:
        throw new unknown_event();
      }
    },
    query: function (url, callback) {
      var exist = false;
      for (var c in callbacks.query) {
        if (callbacks.query.hasOwnProperty(c) && callbacks.query[c].url==url) {
          callbacks.query[c].callback = callback;
          exist = true;
        }
      }
      if(!exist) callbacks.query.push({url: url, callback: callback});
    },
    redirect: function (url, params, session, callback) {
      run_query(url, params, session, callback);
    },
    middleware: function (url, callback) {
      callbacks.middleware.push({
        url: url,
        callback: callback
      });
    }
  }

  function run_query(url, params, session, callback) {
    run_middlewares(url, params, session, function (url, params, session, callback) {
      for (var c in callbacks.query) {
        if (callbacks.query.hasOwnProperty(c) && callbacks.query[c].url==url) {
          callbacks.query[c].callback(params, session, callback);
        }
      }
    }, callback);
  }

  function run_middlewares(url, params, session, next, client_callback) {
    var i = -1;
    var run_middleware = function () {
      i++;
      if (callbacks.middleware[i] != undefined) {
        if (!callbacks.middleware[i].url || url.indexOf(callbacks.middleware[i].url)==0) callbacks.middleware[i].callback(url.substring(url.indexOf(callbacks.middleware[i].url), url.length - callbacks.middleware[i].url.length), params, session, run_middleware, client_callback);
        else run_middleware();
      } else next(url, params, session, client_callback);
    }
    run_middleware();
  }

  function unknown_event(){
    this.message = "Unknown event";
    this.toString = function () {
      return this.message;
    };
  }
}
